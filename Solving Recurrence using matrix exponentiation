// help https://www.geeksforgeeks.org/find-nth-term-a-matrix-exponentiation-example
//question https://www.codechef.com/COG2020/problems/COG2004

#include <bits/stdc++.h> 
using namespace std;
#define MOD 1000000007
#define mod 1000000007
#define int long long
inline long long mul(long long x, long long y) { return (x%mod * 1LL * y%mod) % mod; }
inline long long add(long long x, long long y) { x += y; if (x >= mod) x -= mod; return x; }


long long power(long long n)
{
	if (n <= 1)
		return 1;

	// This power function returns first row of 
	// {Transformation Matrix}^n-1*Initial Vector 
	n--;

	// This is an identity matrix. 
	long long res[2][2] = { 1, 0, 0, 1 };

	// this is Transformation matrix. 
	long long tMat[2][2] = { 2, 2, 1, 0 };

	// Matrix exponentiation to calculate power of {tMat}^n-1 
	// store res in "res" matrix. 
	while (n) {

		if (n & 1) {
			long long tmp[2][2];
			tmp[0][0] = add(mul(res[0][0] , tMat[0][0]) ,mul( res[0][1] , tMat[1][0])) % MOD;
			tmp[0][1] = add(mul(res[0][0] , tMat[0][1]) , mul(res[0][1] , tMat[1][1])) % MOD;
			tmp[1][0] = add(mul(res[1][0] , tMat[0][0]) , mul(res[1][1] , tMat[1][0])) % MOD;
			tmp[1][1] = add(mul(res[1][0] , tMat[0][1] ), mul(res[1][1] , tMat[1][1])) % MOD;
			res[0][0] = tmp[0][0];
			res[0][1] = tmp[0][1];
			res[1][0] = tmp[1][0];
			res[1][1] = tmp[1][1];
		}
		n = n / 2;
		long long tmp[2][2];
		tmp[0][0] = add(mul(tMat[0][0] , tMat[0][0]) , mul(tMat[0][1] , tMat[1][0])) % MOD;
		tmp[0][1] = add(mul(tMat[0][0] , tMat[0][1] ), mul(tMat[0][1] , tMat[1][1])) % MOD;
		tmp[1][0] = add(mul(tMat[1][0] , tMat[0][0]) , mul(tMat[1][1] , tMat[1][0])) % MOD;
		tmp[1][1] = add(mul(tMat[1][0] ,tMat[0][1]) , mul(tMat[1][1] , tMat[1][1])) % MOD;
		tMat[0][0] = tmp[0][0];
		tMat[0][1] = tmp[0][1];
		tMat[1][0] = tmp[1][0];
		tMat[1][1] = tmp[1][1];
	}

	// res store {Transformation matrix}^n-1 
	// hence wilong long be first row of res*Initial Vector. 
	return add(mul(res[0][0] , 2) , res[0][1] * 1) % MOD;
}

// Driver code 
signed main()
{
	int tc;
	cin >> tc;
	while (tc--)
	{
		int n;
		cin >> n;
		cout << power(n)<<endl;

	}
	return 0;
}
