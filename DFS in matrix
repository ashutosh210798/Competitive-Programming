// https://codeforces.com/problemset/problem/377/A
#include <bits/stdc++.h>
using namespace std;
#define rep(i,n)  for(int i = 0; i < n; i++)
#define all(cont) cont.begin(), cont.end()
#define unique(a)  sort(all(a)) , (a).erase(unique((a).begin(), (a).end()),(a).end())
#define rall(cont) cont.rbegin(), cont.rend()
#define sz(x) (int)(x).size()
#define fastio          ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define PB push_back
#define endl "\n"
#define F first
#define S second
#define mod 1000000007
const int N = 505;
const int M = 505;
#define PI acos(-1.0)
typedef long long ll;
#define int long long
typedef long double ld;
typedef vector<int> VI;
#define pqll_max priority_queue<ll> // max heap. push(),pop(),top(),size(),empty()
#define pqll_min priority_queue<ll,vector<ll>,greater<ll> >
#define lb(v,val)   lower_bound(v.begin(),v.end(),val) //first equal to or lower than [------------
#define ub(v,val)   upper_bound(v.begin(),v.end(),val) //first greater than ------------)
#define bs(v,x) binary_search(v.begin(),v.end(),x)
inline ll add(ll x, ll y) { x += y; if (x >= mod) x -= mod; return x; }
inline ll sub(ll a, ll b) { if (a < b)swap(a, b); return (((a%mod) - (b%mod) + mod) % mod); }
inline ll mul(ll x, ll y) { return (x%mod * 1ll * y%mod) % mod; }
inline ll pwr(ll a, ll b) { ll x = 1 % mod; while (b) { if (b & 1) x = mul(x, a); a = mul(a, a); b >>= 1; }return x % mod; }
inline ll inv(ll a) { return pwr(a, mod - 2) % mod; }
ll gcd(ll a, ll b) { if (!a)return b % mod; return gcd(b%a, a) % mod; }
#define debug(x) cout << #x << " = " << x << endl;
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1) {
	cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args) {
	const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1 << " | "; __f(comma + 1, args...);
}
#define in(container) for (auto &it : container) cin>>it;
#define out(container) for (auto it : container) cout << it << " "; cout << endl;
int n, m;
char arr[N][M],arr1[N][M];
bool vis[N][M];
int globalCount = 0;
int toTake;
void dfs(int x, int y) {
	if (x<0 || x>n || y > m || y < 0 || vis[x][y]) {
		return;

	}
	//cout << x << " " << y << endl;
	vis[x][y] = true;
	globalCount++;
	if (globalCount >toTake) {
		arr1[x][y] = 'X';
	}
		if (y-1>=0 && arr[x][y - 1] == '.')
			dfs(x, y - 1);
		if (y+1<m && arr[x][y + 1] == '.')
			dfs(x, y + 1);
		if (x-1>=0 && arr[x - 1][y] == '.')
			dfs(x - 1, y);
		if (x+1<n && arr[x + 1][y] == '.')
			dfs(x + 1, y);



}
signed main()
{
	fastio;

	cin >> n >> m;
	int k;
	cin >> k;
	int count =0;
	rep(i, n) {
		rep(j, m) {
			cin >> arr[i][j];
			if (arr[i][j] == '.')count++;
			arr1[i][j] = arr[i][j];

		}
	}
	toTake = count - k;
	rep(i, n) {
		rep(j, m) {
			if (arr[i][j] == '.')
			{
				dfs(i, j);
				break;
			}
		}
	}
	rep(i, n) {
		rep(j, m) {
			cout << arr1[i][j];
		}
		cout << endl;
	}

	return 0;
}
