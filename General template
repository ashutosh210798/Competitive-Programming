#include <bits/stdc++.h>
#define rep(i,n)  for(int i = 0; i < n; i++)
#define all(cont) cont.begin(), cont.end()
#define rall(cont) cont.rbegin(), cont.rend()
#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)
#define IN(A, B, C) assert( B <= A && A <= C)
#define unique(a)       sort((a).begin(), a.end()), (a).erase(unique((a).begin(), (a).end()),(a).end())
#define fastio          ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define Assert(x)       {if(!(x)){cerr<<"Assertion failed at line "<<__LINE__<<": "<<#x<<" = "<<(x)<<"\n";exit(1);}}
#define MP make_pair
#define PB push_back
#define INF (int)1e9

using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<PII> VII;
typedef vector<VI> VVI;
typedef map<int, int> MPII;
typedef set<int> SETI;
typedef multiset<int> MSETI;
typedef long int int1002;
typedef unsigned long int uint1002;
typedef long long int int64;
typedef unsigned long long int uint64;

double tick() { static clock_t oldt; clock_t newt = clock(); double diff = 1.0*(newt - oldt) / CLOCKS_PER_SEC; oldt = newt; return diff; }


template<typename T> T gcd(T a, T b) { return (b ? __gcd(a, b) : a); }
template<typename T> T lcm(T a, T b) { return (a*(b / gcd(a, b))); }
template <class T> inline T square(T value) {
	return value * value;
}
double intlog(double base, double x) {
	return (double)((double)log(x) / (double)log(base));
}
//union find

  int parent[10005];
    int rank[10005];
    void make_Set(int i)
    {
        parent[i]=i;
        rank[i]=0;
    }
    int find_parent(int v)
    {
        if(v==parent[v])return v;
        else return parent[v]=find_parent(parent[v]);
        
    }
    
    void union_sets(int i, int j)
    {
        int a=find_parent(i);
        int b=find_parent(j);
        
        if(a!=b)
        {
            if(rank[a]<rank[b])
            {
                parent[a]=b;
            }
            else
            {
                parent[b]=a;
                if(rank[a]==rank[b])
                    rank[a]++;
            }
        }
    }
//union find end

// ncr

const int N = 2e5 + 5;
const int MOD = 998244353;
 
int pow(int a, int b, int m)
{
	int ans=1;
	while(b)
	{
		if(b&1)
			ans=(ans*a)%m;
		b/=2;
		a=(a*a)%m;
	}
	return ans;
}
 
int fact[N], invfact[N];
 
int modinv(int k)
{
	return pow(k, MOD-2, MOD);
}
 
void precompute()
{
	fact[0]=fact[1]=1;
	for(int i=2;i<N;i++)
	{
		fact[i]=fact[i-1]*i;
		fact[i]%=MOD;
	}
	invfact[N-1]=modinv(fact[N-1]);
	for(int i=N-2;i>=0;i--)
	{
		invfact[i]=invfact[i+1]*(i+1);
		invfact[i]%=MOD;
	}
}
 
int nCr(int x, int y)
{
	if(y>x)
		return 0;
	int num=fact[x];
	num*=invfact[y];
	num%=MOD;
	num*=invfact[x-y];
	num%=MOD;
	return num;
}
//ncr end


//ncr2
const int N=2e5+5;
lli fac[N+5],inv[N+5];
 
lli po(lli a,lli n)
{
    if(n==0)
        return 1;
    if(n%2)
        return (a*po(a,n-1))%mod;
    return po(a*a%mod,n/2);
}
 
lli nCr(lli n,lli r)
{
    if(n<0||r<0||r>n)
        return 0;
    lli ans=1;
    ans=(ans*fac[n])%mod;
    ans=(ans*inv[r])%mod;
    ans=(ans*inv[n-r])%mod;
    return ans;
}
 
void pre(lli n)
{
    lli i;
    fac[0]=1;
    repA(i,1,n)
        fac[i]=(i*fac[i-1])%mod;
    inv[n]=po(fac[n],mod-2);
    repD(i,n,1)
        inv[i-1]=(i*inv[i])%mod;
    assert(inv[0]==1);
}
//ncr2 end

//ncr3
 ll fact[500001],inv[500001];
 
    ll power(ll a, ll b)    //a is base, b is exponent
    {
        if(b==0)
            return 1;
        if(b==1)
            return a;
        if(b%2 == 1)
            return (power(a,b-1)*a)%mod;
        ll q = power(a,b/2);
        return (q*q)%mod;
    }
 
    void init()
    {
        fact[0]=inv[0]=1;
        for(int i=1;i<=500000;++i)
        {
            fact[i]=(fact[i-1]*i)%mod;
            inv[i]=power(fact[i],mod-2);
        }
    }
 
    ll ncr(int n,int r)
    {
        return ((fact[n]*inv[r])%mod*inv[n-r])%mod;
    }
 
 
//ncr3 end
const int MAX = 1e5 + 5;
const int LIM = 100e5 + 5;
const int MOD = 1e9 + 7;
const LD  EPS = 1e-10;
const LL LLINF = 5011501150111LL;
const double PI = acos(-1.0);
bool isPrime(int n)
{

	if (n <= 1)  return false;
	if (n <= 3)  return true;

	if (n % 2 == 0 || n % 3 == 0) return false;

	for (int i = 5; i*i <= n; i = i + 6)
		if (n%i == 0 || n % (i + 2) == 0)
			return false;

	return true;
}

long long int power(long long int a, long long int p, long long int mod)
{
	long long int result = 1;
	if (p == 0)
		return 1;
	if (p == 1)
		return a;
	while (p)
	{
		if (p & 1)
			result *= a;
		result %= mod;
		p >>= 1;
		a *= a;
		a %= mod;
	}
	return result;
}

vector<vector<int>>allSubsequenceList;

void getAllSubsequences(vector<int>arr, int n)
{
	/* Number of subsequences is (2**n -1)*/
	vector <int>currentSubsequenceList;
	unsigned int opsize = pow(2, n);

	/* Run from counter 000..1 to 111..1*/
	for (int counter = 1; counter < opsize; counter++)
	{
		currentSubsequenceList.clear();
		for (int j = 0; j < n; j++)
		{
			/* Check if jth bit in the counter is set
				If set then print jth element from arr[] */

			if (counter & (1 << j))
			{
				currentSubsequenceList.PB(arr[j]);


			}
		}
		allSubsequenceList.PB(currentSubsequenceList);

		//cout << endl; 
	}
}





vector<pair<long long, long long> > get_fact(long long x) {
	vector<pair<long long, long long> > ret;
	for (long long i = 2; i*i <= x; i++) {
		if (x%i)
			continue;
		int cnt = 0;
		while (x%i == 0) {
			x /= i;
			cnt++;
		}
		ret.push_back(make_pair(i, cnt));
	}
	if (x > 1)
		ret.push_back(make_pair(x, 1));
	return ret;
}

vector<long long >s;
void primeFactors(long long n)
{

	while (n % 2 == 0)
	{
		s.PB(2);
		n = n / 2;
	}


	for (long long i = 3; i <= sqrt(n); i = i + 2)
	{

		while (n%i == 0)
		{

			s.PB(i);
			n = n / i;
		}
	}

	if (n > 2)
		s.PB(n);
}



vector <long long > printDivisors(long long  n)
{
	vector <long long > v;

	for (long long i = 1; i <= sqrt(n); i++)
	{
		if (n%i == 0)
		{
			if (n / i == i)
				v.PB(i);

			else
			{
				v.PB(n / i);
				v.PB(i);
			}
		}
	}

	return v;
}


bool visited[1005];
vector<int> adj[1005];
map<int, int>noOfLeafChilds;
void dfs(int node)
{

	if (!visited[node])
	{
		visited[node] = true;

		for (int i : adj[node])
		{
			if (adj[i].size() == 0)
				noOfLeafChilds[node]++;

			dfs(i);
		}
	}
}

int main()
{
	int n;
	cin >> n;
	VI v(n);
	rep(i, n)cin >> v[i];

	rep(i, n)
	{
		if (i == 0)
		{
			if (v[i + 1] < v[i])
			{
				cout << "no" << endl;
				return 0;
			}
			
		}
		else if (i == n - 1)
		{
			if (v[i - 1] < v[i])
			{
				cout << "no" << endl;
				return 0;
			}
		}
		else if (v[i] != n && ((v[i + 1] < v[i]) && (v[i - 1] < v[i])))
		{
			cout << "no" << endl;
			return 0;
		}
	}

	cout << "yes" << endl;
}
